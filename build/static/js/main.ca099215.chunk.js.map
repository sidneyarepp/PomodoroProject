{"version":3,"sources":["utils/duration/index.js","pomodoro/FocusDuration.js","pomodoro/BreakDuration.js","pomodoro/PlayPauseStop.js","utils/class-names/index.js","pomodoro/CurrentSession.js","pomodoro/PomodoroTwo.js","utils/useInterval/index.js","App.js","index.js"],"names":["minutesToDuration","givenMinutes","minutes","Math","floor","toString","padStart","FocusDuration","focusDuration","setFocusDuration","isTimerRunning","session","className","data-testid","time","type","onClick","disabled","timeRemaining","BreakDuration","breakDuration","setBreakDuration","PlayPauseStop","classNameToBoolean","playPause","stopTimer","role","aria-label","title","oi","Object","entries","reduce","classes","value","concat","undefined","filter","join","CurrentSession","label","givenSeconds","seconds","round","secondsToDuration","style","height","aria-valuemin","aria-valuemax","aria-valuenow","width","PomodoroTwo","nextTick","prevState","max","useState","setIsTimerRunning","setSession","useHandleTime","min","changeQuantity","initialValue","state","setState","e","target","dataset","testid","parentNode","includes","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","Audio","play","currentSession","nextSession","nextState","prevStateSession","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca099215.chunk.js","sourcesContent":["/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n","import React from 'react'\nimport { minutesToDuration } from '../utils/duration/index'\n\nfunction FocusDuration({ focusDuration, setFocusDuration, isTimerRunning, session }) {\n    return (\n        <div className=\"col\">\n            <div className=\"input-group input-group-lg mb-2\">\n                <span className=\"input-group-text\" data-testid=\"duration-focus\">\n                    {/* TODO: Update this text to display the current focus session duration */}\n                    Focus Duration: {minutesToDuration(focusDuration.time)}\n                </span>\n                <div className=\"input-group-append\">\n                    {/* TODO: Implement decreasing focus duration and disable during a focus or break session */}\n                    <button\n                        type=\"button\"\n                        className=\"btn btn-secondary\"\n                        data-testid=\"decrease-focus\"\n                        onClick={setFocusDuration}\n                        disabled={isTimerRunning || session?.timeRemaining}\n                    >\n                        <span className=\"oi oi-minus\" />\n                    </button>\n                    {/* TODO: Implement increasing focus duration  and disable during a focus or break session */}\n                    <button\n                        type=\"button\"\n                        className=\"btn btn-secondary\"\n                        data-testid=\"increase-focus\"\n                        onClick={setFocusDuration}\n                        disabled={isTimerRunning || session?.timeRemaining}\n                    >\n                        <span className=\"oi oi-plus\" />\n                    </button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default FocusDuration;","import React from 'react';\nimport { minutesToDuration } from '../utils/duration/index';\n\n\nfunction BreakDuration({ breakDuration, setBreakDuration, session, isTimerRunning }) {\n    return (\n        <div className=\"col\">\n            <div className=\"float-right\">\n                <div className=\"input-group input-group-lg mb-2\">\n                    <span className=\"input-group-text\" data-testid=\"duration-break\">\n                        {/* TODO: Update this text to display the current break session duration */}\n                        Break Duration: {minutesToDuration(breakDuration.time)}\n                    </span>\n                    <div className=\"input-group-append\">\n                        {/* TODO: Implement decreasing break duration and disable during a focus or break session*/}\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-secondary\"\n                            data-testid=\"decrease-break\"\n                            onClick={setBreakDuration}\n                            disabled={isTimerRunning || session?.timeRemaining}\n                        >\n                            <span className=\"oi oi-minus\" />\n                        </button>\n                        {/* TODO: Implement increasing break duration and disable during a focus or break session*/}\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-secondary\"\n                            data-testid=\"increase-break\"\n                            onClick={setBreakDuration}\n                            disabled={isTimerRunning || session?.timeRemaining}\n                        >\n                            <span className=\"oi oi-plus\" />\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default BreakDuration;","import React from 'react';\nimport classNames from \"../utils/class-names\";\n\nfunction PlayPauseStop({ playPause, isTimerRunning, stopTimer }) {\n    return (\n        <div className=\"col\">\n            <div\n                className=\"btn-group btn-group-lg mb-2\"\n                role=\"group\"\n                aria-label=\"Timer controls\"\n            >\n                <button\n                    type=\"button\"\n                    className=\"btn btn-primary\"\n                    data-testid=\"play-pause\"\n                    title=\"Start or pause timer\"\n                    onClick={playPause}\n                >\n                    <span\n                        className={classNames({\n                            oi: true,\n                            \"oi-media-play\": !isTimerRunning,\n                            \"oi-media-pause\": isTimerRunning,\n                        })}\n                    />\n                </button>\n                {/* TODO: Implement stopping the current focus or break session. and disable the stop button when there is no active session */}\n                {/* TODO: Disable the stop button when there is no active session */}\n                <button\n                    type=\"button\"\n                    className=\"btn btn-secondary\"\n                    data-testid=\"stop\"\n                    title=\"Stop the session\"\n                    disabled={!isTimerRunning}\n                    onClick={stopTimer}\n                >\n                    <span className=\"oi oi-media-stop\" />\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default PlayPauseStop;","/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","import React from 'react';\nimport { minutesToDuration, secondsToDuration } from '../utils/duration';\n\nfunction CurrentSession({ session, breakDuration, focusDuration, isTimerRunning }) {\n    return (\n\n        <div>\n            {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\n\n\n            {session?.timeRemaining > 0 &&\n                <div>\n                    <div className=\"row mb-2\">\n                        <div className=\"col\">\n                            {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\n                            <h2 data-testid=\"session-title\">\n                                {session?.label + ' for ' + minutesToDuration(session?.label === 'On Break' ? breakDuration.time : focusDuration.time) + ' minutes'}\n                            </h2>\n                            {/* TODO: Update message below correctly format the time remaining in the current session */}\n                            <p className=\"lead\" data-testid=\"session-sub-title\">\n                                {secondsToDuration(session?.timeRemaining) + ' remaining'}\n                            </p>\n                        </div>\n                    </div>\n\n                    {!isTimerRunning && <h2>PAUSED</h2>}\n\n                    <div className=\"row mb-2\">\n                        <div className=\"col\">\n                            <div className=\"progress\" style={{ height: \"20px\" }}>\n                                <div\n                                    className=\"progress-bar\"\n                                    role=\"progressbar\"\n                                    aria-valuemin=\"0\"\n                                    aria-valuemax=\"100\"\n                                    aria-valuenow={((1 - (session.timeRemaining / ((session?.label === 'On Break' ? breakDuration.time : focusDuration.time) * 60))) * 100)} // TODO: Increase aria-valuenow as elapsed time increases\n                                    style={{\n                                        width: ((1 - (session.timeRemaining / ((session?.label === 'On Break' ? breakDuration.time : focusDuration.time) * 60))) * 100) + '%'\n                                    }} // TODO: Increase width % as elapsed time increases\n                                />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            }\n\n\n        </div>\n\n    )\n}\n\nexport default CurrentSession;","import React, { useState } from 'react';\nimport useInterval from \"../utils/useInterval\";\nimport FocusDuration from './FocusDuration';\nimport BreakDuration from './BreakDuration';\nimport PlayPauseStop from './PlayPauseStop';\nimport CurrentSession from './CurrentSession';\n\n\nfunction PomodoroTwo() {\n\n    // These functions are defined outside of the component to insure they do not have access to state\n    // and are, therefore more likely to be pure.\n\n    /**\n     * Update the session state with new state after each tick of the interval.\n     * @param prevState\n     *  the previous session state\n     * @returns\n     *  new session state with timing information updated.\n     */\n    function nextTick(prevState) {\n        const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n        return {\n            ...prevState,\n            timeRemaining,\n        };\n    }\n\n    /**\n     * Higher order function that returns a function to update the session state with the next session type upon timeout.\n     * @param focusDuration\n     *    the current focus duration\n     * @param breakDuration\n     *    the current break duration\n     * @returns\n     *  function to update the session state.\n     */\n\n    function nextSession(focusDuration, breakDuration) {\n        /**\n         * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n         */\n        return (currentSession) => {\n            if (currentSession.label === \"Focusing\") {\n                return {\n                    label: \"On Break\",\n                    timeRemaining: breakDuration.time * 60,\n                };\n            }\n            return {\n                label: \"Focusing\",\n                timeRemaining: focusDuration.time * 60,\n            };\n        };\n    }\n\n    // Timer starts out paused\n    const [isTimerRunning, setIsTimerRunning] = useState(false);\n    // The current session - null where there is no session running\n    const [session, setSession] = useState(null);\n\n    // ToDo: Allow the user to adjust the focus and break duration.\n    const [focusDuration, setFocusDuration] = useHandleTime({ time: 25, min: 5, max: 60, changeQuantity: 5 });\n    const [breakDuration, setBreakDuration] = useHandleTime({ time: 5, min: 1, max: 15, changeQuantity: 1 });\n\n    /**\n     * Custom hook that invokes the callback function every second\n     *\n     * NOTE: You will not need to make changes to the callback function\n     */\n    useInterval(() => {\n        if (session.timeRemaining === 0) {\n            new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n            return setSession(nextSession(focusDuration, breakDuration));\n        }\n        return setSession(nextTick);\n    },\n        isTimerRunning ? 1000 : null\n    );\n\n    /**\n     * Called whenever the play/pause button is clicked.\n     */\n    function playPause() {\n        setIsTimerRunning((prevState) => {\n            const nextState = !prevState;\n            if (nextState) {\n                setSession((prevStateSession) => {\n                    // If the timer is starting and the previous session is null,\n                    // start a focusing session.\n                    if (prevStateSession === null) {\n                        return {\n                            label: \"Focusing\",\n                            timeRemaining: focusDuration.time * 60,\n                        };\n                    }\n                    return prevStateSession;\n                });\n            }\n            return nextState;\n        });\n    }\n\n    //Custom hook to handle clicking the increase/decrease time buttons.\n    function useHandleTime(initialValue) {\n        const [state, setState] = useState(initialValue);\n\n        function countChange(e) {\n            const returnValue = e.target.dataset.testid ? e.target.dataset.testid : e.target.parentNode.dataset.testid\n\n            returnValue.includes('increase')\n\n                ?\n\n                setState({ ...state, 'time': (Math.min(state.max, Math.max(state.min, state.time + state.changeQuantity))) })\n\n                :\n\n                setState({ ...state, 'time': (Math.min(state.max, Math.max(state.min, state.time - state.changeQuantity))) })\n\n        }\n        return [state, countChange];\n\n    }\n\n    //Function to handle the stop button when a session is running.\n    function stopTimer() {\n        setIsTimerRunning(false)\n        setSession(null)\n    }\n\n    return (\n\n        <div className=\"pomodoro\">\n            <div className=\"row\">\n                <FocusDuration session={session} focusDuration={focusDuration} setFocusDuration={setFocusDuration} isTimerRunning={isTimerRunning} />\n                <BreakDuration session={session} breakDuration={breakDuration} setBreakDuration={setBreakDuration} isTimerRunning={isTimerRunning} />\n            </div>\n\n            <div className=\"row\">\n                <PlayPauseStop stopTimer={stopTimer} isTimerRunning={isTimerRunning} playPause={playPause} />\n            </div>\n\n            <CurrentSession session={session} breakDuration={breakDuration} focusDuration={focusDuration} isTimerRunning={isTimerRunning} />\n        </div>\n    )\n}\n\nexport default PomodoroTwo;","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport PomodoroTwo from \"./pomodoro/PomodoroTwo\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <PomodoroTwo />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}